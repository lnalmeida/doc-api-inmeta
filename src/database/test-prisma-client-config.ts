/**
 * Teste de configura√ß√£o do Prisma Client
 * Verifica se o cliente est√° configurado corretamente SEM precisar do banco f√≠sico
 */

console.log('üîß Testando configura√ß√£o do Prisma Client...\n');

// Teste 1: Verificar se consegue importar o cliente
console.log('1. Testando importa√ß√£o do Prisma Client...');
try {
  require('@prisma/client');
  console.log('   ‚úÖ @prisma/client importado com sucesso');
} catch (error) {
  console.error('   ‚ùå Erro ao importar @prisma/client:', error.message);
  console.error('   üí° Execute: npm run db:generate');
  process.exit(1);
}

// Teste 2: Verificar se o PrismaService funciona
console.log('\n2. Testando PrismaService...');
try {
  const { PrismaService } = require('./prisma.service');

  // Verificar se a classe existe
  if (typeof PrismaService === 'function') {
    console.log('   ‚úÖ Classe PrismaService encontrada');
  }

  // Verificar se consegue instanciar
  const service = new PrismaService();
  if (service instanceof PrismaService) {
    console.log('   ‚úÖ PrismaService instanciado com sucesso');
  }

  // Verificar se tem os m√©todos de lifecycle
  if (typeof service.onModuleInit === 'function') {
    console.log('   ‚úÖ M√©todo onModuleInit dispon√≠vel');
  }

  if (typeof service.onModuleDestroy === 'function') {
    console.log('   ‚úÖ M√©todo onModuleDestroy dispon√≠vel');
  }
  if (typeof service.$connect === 'function') {
    console.log('   ‚úÖ M√©todo $connect dispon√≠vel');
  }
} catch (error) {
  console.error('   ‚ùå Erro ao importar PrismaService:', error.message);

  if (error.message.includes('Cannot find module')) {
    console.error(
      '   üí° Verifique se o arquivo client.ts existe em src/database/',
    );
  }
  process.exit(1);
}

// Teste 3: Verificar vari√°veis de ambiente
console.log('\n3. Testando configura√ß√£o de ambiente...');
const databaseUrl = process.env.DATABASE_URL;
if (databaseUrl) {
  console.log('   ‚úÖ DATABASE_URL configurada');
  console.log(`   üìç Caminho: ${databaseUrl}`);

  // Verificar se √© SQLite e se o caminho faz sentido
  if (databaseUrl.startsWith('file:')) {
    const dbPath = databaseUrl.replace('file:', '');
    console.log(`   üìÅ Arquivo do banco ser√° criado em: ${dbPath}`);

    // Verificar se o diret√≥rio pai existe
    const path = require('path');
    const fs = require('fs');
    const dir = path.dirname(
      dbPath.startsWith('./') ? dbPath.substring(2) : dbPath,
    );

    if (fs.existsSync(dir) || dir === '.' || dir === '') {
      console.log(
        '   ‚úÖ Diret√≥rio do banco existe ou ser√° criado automaticamente',
      );
    } else {
      console.log(
        `   ‚ö†Ô∏è Diret√≥rio ${dir} n√£o existe - ser√° criado no primeiro push`,
      );
    }
  }
} else {
  console.error('   ‚ùå DATABASE_URL n√£o encontrada');
  console.error(
    '   üí° Crie um arquivo .env com DATABASE_URL="file:./src/database/dev.db"',
  );
  process.exit(1);
}

// Teste 4: Verificar se o schema existe
console.log('\n4. Testando arquivo de schema...');
const fs = require('fs');
const path = require('path');

const schemaPath = 'src/database/prisma/schema.prisma';
if (fs.existsSync(schemaPath)) {
  console.log('   ‚úÖ Arquivo schema.prisma encontrado');

  // Ler e verificar conte√∫do b√°sico do schema
  const schemaContent = fs.readFileSync(schemaPath, 'utf8');

  if (schemaContent.includes('generator client')) {
    console.log('   ‚úÖ Generator configurado no schema');
  } else {
    console.error('   ‚ùå Generator n√£o encontrado no schema');
  }

  if (schemaContent.includes('datasource db')) {
    console.log('   ‚úÖ Datasource configurado no schema');
  } else {
    console.error('   ‚ùå Datasource n√£o encontrado no schema');
  }

  if (schemaContent.includes('provider = "sqlite"')) {
    console.log('   ‚úÖ Provider SQLite configurado');
  } else {
    console.log(
      '   ‚ö†Ô∏è Provider SQLite n√£o encontrado - verifique a configura√ß√£o',
    );
  }
} else {
  console.error(`   ‚ùå Schema n√£o encontrado em: ${schemaPath}`);
  console.error(
    '   üí° Crie o arquivo schema.prisma na pasta src/database/prisma/',
  );
  process.exit(1);
}

// Teste 5: Verificar se o Prisma Client foi gerado
console.log('\n5. Testando se o cliente foi gerado...');
try {
  const { PrismaClient } = require('@prisma/client');
  const client = new PrismaClient();

  // Verificar se tem os models esperados (sem conectar no banco)
  const clientKeys = Object.keys(client);
  const expectedModels = ['user', 'profile', 'post', 'category', 'tag'];
  const foundModels = expectedModels.filter((model) =>
    clientKeys.includes(model),
  );

  if (foundModels.length > 0) {
    console.log(`   ‚úÖ Models encontrados: ${foundModels.join(', ')}`);
  } else {
    console.log(
      '   ‚ö†Ô∏è Nenhum model encontrado - cliente pode n√£o ter sido gerado',
    );
    console.log('   üí° Execute: npm run db:generate');
  }

  // Verificar m√©todos importantes
  const hasImportantMethods = ['$connect', '$disconnect', '$queryRaw'].every(
    (method) => typeof client[method] === 'function',
  );

  if (hasImportantMethods) {
    console.log('   ‚úÖ M√©todos essenciais do cliente dispon√≠veis');
  } else {
    console.error('   ‚ùå M√©todos essenciais n√£o encontrados');
  }
} catch (error) {
  console.error('   ‚ùå Erro ao instanciar PrismaClient:', error.message);
  console.error('   üí° Execute: npm run db:generate');
}

// Teste 6: Verificar se consegue instanciar sem conectar
console.log('\n6. Testando instancia√ß√£o sem conex√£o...');
try {
  const { PrismaService } = require('./prisma.service');

  // Verificar se a inst√¢ncia tem as propriedades esperadas
  if (typeof PrismaService.$connect === 'function') {
    console.log('   ‚úÖ M√©todo $connect dispon√≠vel');
  }

  if (typeof PrismaService.$disconnect === 'function') {
    console.log('   ‚úÖ M√©todo $disconnect dispon√≠vel');
  }

  console.log('   ‚úÖ Cliente instanciado sem erros');
} catch (error) {
  console.error('   ‚ùå Erro na instancia√ß√£o:', error.message);
}

// Teste 7: Verificar types TypeScript (se aplic√°vel)
console.log('\n7. Verificando types...');
// Tentar importar tipos do Prisma
const prismaTypes = require('@prisma/client');

if (prismaTypes.Prisma) {
  console.log('   ‚úÖ Tipos do Prisma dispon√≠veis');
}

if (prismaTypes.PrismaClient) {
  console.log('   ‚úÖ PrismaClient types dispon√≠veis');
}

console.log('\nüéâ Teste de configura√ß√£o conclu√≠do!');
console.log('\nüìã Pr√≥ximos passos:');
console.log('   1. npm run db:push      # Criar o banco f√≠sico');
console.log('   2. npm run db:generate  # Regenerar o cliente');
console.log('   3. npm run test:db:quick # Testar com banco real');

console.log('\n‚úÖ Prisma Client est√° configurado e pronto para uso!');
